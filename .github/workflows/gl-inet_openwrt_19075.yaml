name: Build GLMV1000W GL-INet OpenWrt

on:
  push:
    branches: 
      - main
    paths:
      - 'gl-inet_mv1000w.config'
  #schedule:
  #  - cron: 0 21 * * *

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  REPO_URL: https://github.com/gl-inet/openwrt.git
  REPO_BRANCH: openwrt-19.07.5
  CONFIG_FILE: gl-inet_mv1000w.config
  DIY_SH: gl-inet_openwrt.sh
  TZ: Asia/Shanghai
  DEVICE: mvebu
  VERMAGIC_URL: https://downloads.openwrt.org/releases/19.07.5/targets/mvebu/cortexa53/packages/Packages.gz

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@master

    - name: Init
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo ln -s /bin/grep  /usr/bin/grep
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq install golang
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone
      id: clone
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        # Synchronize openwrt community vermagic
        cd openwrt
        KERNEL_PATCHVER=`grep KERNEL_PATCHVER target/linux/$DEVICE/Makefile|awk -F= '{print $2}'`
        LINUX_VERSION=`grep LINUX_VERSION-$KERNEL_PATCHVER include/kernel-version.mk | awk -F' = ' '{print $2}'`
        wget -q -c $VERMAGIC_URL -O - | zgrep -m 1 "Depends: kernel (=$KERNEL_PATCHVER$LINUX_VERSION.*)$" |sed -e 's/.*-\(.*\))/\1/' > .vermagic
        sed -i '/.vermagic/ s/^/#/' include/kernel-defaults.mk
        sed -i '/.vermagic/ s/$/\n\tcp $(TOPDIR)\/.vermagic\ \$(LINUX_DIR)\/.vermagic/' include/kernel-defaults.mk
        cat .vermagic && grep ".vermagic" include/kernel-defaults.mk
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

    - name: Feeds
      id: feeds
      run: |
       cd $OPENWRTROOT
       echo "#src-git gli_pub https://github.com/gl-inet/gli-pub.git" > feeds.conf.default
       echo "src-git packages https://git.openwrt.org/feed/packages.git;openwrt-19.07" >> feeds.conf.default
       echo "src-git luci https://git.openwrt.org/project/luci.git;openwrt-19.07" >> feeds.conf.default
       echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-19.07" >> feeds.conf.default
       echo "src-git telephony https://git.openwrt.org/feed/telephony.git;openwrt-19.07" >> feeds.conf.default
       echo "src-git freifunk https://github.com/freifunk/openwrt-packages.git;openwrt-19.07" >> feeds.conf.default
       ./scripts/feeds update -a
       if [ "$?" -ne "0" ]; then
         echo "!!!!!! Feeds Update Error !!!!!!"
         exit 1
       fi
       ./scripts/feeds install -a

    - name: LoadConf
      id: loadconf
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        chmod +x *.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        rm -f package/lean/autocore/files/cpuinfo
        cp -f ../cpuinfo package/lean/autocore/files/
        make defconfig

    - name: download
      id: download
      run: |
        cd $OPENWRTROOT
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        mkdir -p staging_dir/host/bin/
        ln -s /usr/bin/upx staging_dir/host/bin/upx
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=COMPILE_STATUS::success"

    - name: Package
      id: package
      if: steps.compile.outputs.COMPILE_STATUS == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT/bin/
        tar zcf Packages.tar.gz packages/
        mv Packages.tar.gz targets/*/*/
        cd targets/*/*
        tar zcf Kernel_Packages.tar.gz packages/
        rm -fr packages
        ls -lh
        FIRMWARE_DATE=`date +'%Y%m%d%H%M%S%s'`
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE_DATE=$FIRMWARE_DATE" >> $GITHUB_ENV
        echo "::set-output name=PACKAGE_STATUS::success"
      
    - name: Release
      id: release
      uses: svenstaro/upload-release-action@v1-release
      if: steps.package.outputs.PACKAGE_STATUS == 'success' && !cancelled()
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: ${{ env.FIRMWARE }}/*
        tag: GLMV1000_Offical_V${{ env.FIRMWARE_DATE }}
        overwrite: true
        file_glob: true
